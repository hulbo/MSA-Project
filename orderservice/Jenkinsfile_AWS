def ports = ['8070']

pipeline {
    agent any
    tools {
        maven "Maven_3.9.9"
    }

    environment {
        DOCKER_HUL_ID = "hulbo"
        IMAGE_NAME = "sc_orderservice"
    }

    stages {
        stage('Clean dangling Docker images') {
            steps {
                sh 'docker image prune -f'
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Set Spring Profile') {
            steps {
                script {
                    def branch = sh(script: "git branch -r --contains HEAD | grep origin/ | head -n 1 | sed 's@origin/@@'", returnStdout: true).trim()
                    def profile = 'local'
                    if (branch == 'main') {
                        profile = 'prod'
                    } else if (branch == 'develop') {
                        profile = 'dev'
                    } else if (branch == 'test') {
                        profile = 'test'
                    }

                    def tag = 'latest'

                    env.BRANCH = branch
                    env.ACTIVE_PROFILE = profile
                    env.IMAGE_TAG = tag
                    env.FULL_IMAGE_NAME = "${env.DOCKER_HUL_ID}/${env.IMAGE_NAME}:${env.IMAGE_TAG}"

                    echo "▶ 선택된 브랜치: ${env.BRANCH}"
                    echo "▶ 적용된 ACTIVE_PROFILE: ${env.ACTIVE_PROFILE}"
                    echo "▶ Docker 이미지 태그: ${env.IMAGE_TAG}"
                    echo "▶ Docker 전체 이미지 명: ${env.FULL_IMAGE_NAME}"
                    echo "▶ 환경변수: DB_URL: $DB_URL"
                    echo "▶ 환경변수: DB_INFO: $DB_INFO"
                    echo "▶ 환경변수: AWS_SERVICE_PRIVATE: $AWS_SERVICE_PRIVATE"
                }
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${env.FULL_IMAGE_NAME} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Docker-Hub_hulbo', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "echo $PASSWORD | docker login -u $USERNAME --password-stdin"
                    sh "docker push ${env.FULL_IMAGE_NAME}"
                }
            }
        }

        stage('Deploy to Remote Server') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Docker-Hub_hulbo', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        for (port in ports) {
                            def containerName = "${env.IMAGE_NAME}_${port}"

                            sh """
                                ssh -o StrictHostKeyChecking=no aws-service-jenkins '
                                    echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin

                                    if docker ps -a --format "{{.Names}}" | grep -q "^${containerName}\$"; then
                                        docker stop ${containerName}
                                        docker rm ${containerName}
                                    fi

                                    docker pull ${env.FULL_IMAGE_NAME}

                                    docker run -d --name ${containerName} -p ${port}:8080 -e SERVER_PORT=8080 -e DB_URL=$DB_URL -e DB_INFO=$DB_INFO -e AWS_SERVICE_PRIVATE=$AWS_SERVICE_PRIVATE -e SPRING_PROFILES_ACTIVE=${env.ACTIVE_PROFILE} -e EUREKA_INSTANCE_ID=${containerName} ${env.FULL_IMAGE_NAME}

                                    docker image prune -f
                                '
                            """
                        }
                    }
                }
            }
        }
    }
}
